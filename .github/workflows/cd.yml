name: CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      # Step 3: Configure AWS credentials using secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Set AWS_PROFILE environment variable for kubectl
      - name: Set AWS_PROFILE for kubectl
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile ${{ secrets.AWS_PROFILE }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile ${{ secrets.AWS_PROFILE }}
          aws configure set region ${{ secrets.AWS_REGION }} --profile ${{ secrets.AWS_PROFILE }}
          echo "AWS_PROFILE=${{ secrets.AWS_PROFILE }}" >> $GITHUB_ENV

      # Step 5: Verify AWS profile configuration (Optional Debug)
      - name: Verify AWS profile configuration
        run: |
          echo "=== AWS Profile Configuration ==="
          aws sts get-caller-identity --profile ${{ secrets.AWS_PROFILE }}
          aws s3 ls --profile ${{ secrets.AWS_PROFILE }}

      # Step 6: Set up kubectl with your pre-configured KUBECONFIG
      - name: Set up kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      # Step 7: Test kubectl access
      - name: Test kubectl access
        run: |
          kubectl cluster-info
          kubectl get nodes

      # Step 8: Get pods
      - name: Get pods
        run: |
          kubectl get pods -A

      # Step 9: Get LoadBalancer URL
      - name: Get LoadBalancer URL
        run: |
          LB_URL=$(kubectl get svc fastapi-external -n my-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "The LoadBalancer URL is: $LB_URL"
          echo "LB_URL=$LB_URL" >> $GITHUB_ENV  # Set as an environment variable for subsequent steps

      # Step 10: Test FastAPI endpoint
      - name: Test FastAPI endpoint
        run: |
          echo "Testing FastAPI endpoint..."
          # Wait for the load balancer to route traffic
          timeout 60s bash -c 'until curl -s http://$LB_URL/health; do sleep 2; done'
          echo "LB URL: $LB_URL"

          # Test the POST endpoint
          curl -X POST "http://$LB_URL/process-issue" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "Test Issue",
              "body": "huberregressor"
            }'
